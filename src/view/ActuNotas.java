/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadgrupo21.accesoaDatos.AlumnoData;
import universidadgrupo21.accesoaDatos.InscripcionData;
import universidadgrupo21.accesoaDatos.MateriaData;
import universidadgrupo21.entidades.Alumno;
import universidadgrupo21.entidades.Inscripcion;
import universidadgrupo21.entidades.Materia;

/**
 *
 * @author Admin
 */
public class ActuNotas extends javax.swing.JInternalFrame {

//    private InscripcionData inscData;
    DefaultTableModel corcha = new DefaultTableModel();

    public boolean isCellEditable(int f, int c) {
        return c == 2;

    }

    public ActuNotas() {
        initComponents();
        cargarcombo();
        organizar();
//        inscData = new InscripcionData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcAlumnos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtNotas = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setTitle("Carga de notas");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("CARGA DE NOTAS");

        jLabel2.setText("Seleccionar un alumno:");

        jcAlumnos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcAlumnosItemStateChanged(evt);
            }
        });

        jtNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtNotas);

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jbGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalir)
                .addGap(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardar)
                    .addComponent(jbSalir))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jcAlumnosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcAlumnosItemStateChanged
        Alumno seleccionado = (Alumno) jcAlumnos.getSelectedItem();
        //MateriaData md = new MateriaData();
        InscripcionData id = new InscripcionData();
        Inscripcion ins = new Inscripcion();

        if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            removedor();
            for (Materia mate : id.obtenerMateriasCursadas(seleccionado.getIdalumno())) {

                corcha.addRow(new Object[]{
                    mate.getIdMateria(),
                    mate.getNombre(),
                    ins.getNota()

                });

            }
        }
    }//GEN-LAST:event_jcAlumnosItemStateChanged

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        int filaS = jtNotas.getSelectedRow();
        Alumno alu = (Alumno) jcAlumnos.getSelectedItem();
        InscripcionData id = new InscripcionData();
        Inscripcion ins = new Inscripcion();
        int idAlumno=alu.getIdalumno();
        //Materia mate=new Materia();
        //Alumno alumno=new Alumno();
        if (filaS != -1) {
            int idMateria = (Integer) corcha.getValueAt(filaS, 0);
            String notaV = corcha.getValueAt(filaS, 2).toString();
                int nota = Integer.parseInt(notaV);
            for (Materia mate : id.obtenerMateriasCursadas(alu.getIdalumno())) {

                corcha.addRow(new Object[]{
                    mate.getIdMateria(),
                    mate.getNombre(),
                    ins.getNota()
                    
                });
                    removedor();
            }
            
//            Alumno alu = (Alumno) jcAlumnos.getSelectedItem();
            // int idMateria = (Integer) corcha.getValueAt(filaS, 0);
//            String nombreMateria = (String) corcha.getValueAt(filaS, 1);

            //String notaV = corcha.getValueAt(filaS, 2).toString();
              //  int nota = Integer.parseInt(notaV);
              
//            int nota = ins.getNota();
            
             
          
             id.actualizarNota(idAlumno, idMateria, nota);

//            removedor();

        }else{JOptionPane.showMessageDialog(this, "Seleccione una  fila de la tabla");}
    }//GEN-LAST:event_jbGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcAlumnos;
    private javax.swing.JTable jtNotas;
    // End of variables declaration//GEN-END:variables
private void cargarcombo() {

        AlumnoData alud = new AlumnoData();
        for (int i = 0; i < alud.listador().size(); i++) {
            jcAlumnos.addItem(alud.listador().get(i));
        }
    }

    public void organizar() {
        corcha.addColumn("CODIGO");
        corcha.addColumn("NOMBRE");
        corcha.addColumn("NOTA");

        jtNotas.setModel(corcha);
    }

    private void removedor() {
        int f = jtNotas.getRowCount() - 1;
        for (; f >= 0; f--) {
            corcha.removeRow(f);

        }

    }

}
